---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../layouts/components/Header.astro';
import Footer from '../../layouts/components/Footer.astro';
import {SITE_TITLE, SITE_DESCRIPTION, SITE_PIFXY} from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const postsMarkdown = await getCollection('markdown');
const postsVue = await getCollection('vue');
const postsJenkins = await getCollection('jenkins');
const postsDocker = await getCollection('docker');
const postsReact = await getCollection('react');

const posts = {
	all: [
		...postsVue,
		...postsMarkdown,
		...postsJenkins,
		...postsDocker,
		...postsReact
	].sort(sortFn),
	vue: postsVue.sort(sortFn),
	react: postsReact.sort(sortFn),
	jenkins: postsJenkins.sort(sortFn),
	docker: postsDocker.sort(sortFn),
	markdown: postsMarkdown.sort(sortFn),
}

function sortFn(a: any, b: any) {
	return b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
}
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
			<section>
				<div class="left-tabs">
					<blog-tabs>
						{
							Object.keys(posts).map((key) => (
								<a>{key}</a>
							))
						}
					</blog-tabs>
				</div>
				<div class="right-views">
					<blog-views>
						{
							Object.keys(posts).map((key) => (
								<ul list-name={'posts_' + key}>
									{
										posts[key].map((post) => (
											<li>
												<a item-name="posts_item" href={`${SITE_PIFXY}/blog/${post.slug}/`}>
													<img width={720} height={360} src={SITE_PIFXY + post.data.heroImage} alt="" />
													<h4 class="title">{post.data.title}</h4>
													<p class="date">
														<FormattedDate date={post.data.pubDate} />
													</p>
												</a>
											</li>
										))
									}
								</ul>
							))
						}
					</blog-views>
				</div>
			</section>
		</main>
		<Footer />
	</body>

	<script>

		class EventAction {
			private eventList = new Map();


			public subscribe(eventName?, callback?) {
				this.eventList.set(eventName, callback)
			}

			public emit(eventName?, params?) {
				if(this.eventList.has(eventName)){
					this.eventList.get(eventName)(params)
				} else {
					throw Error('请先订阅' + eventName)
				}
			}
		}

		const events = new EventAction();
		class BlogViews extends HTMLElement {

			private currentTab = localStorage.getItem('CURRENT_TAB') || 'all'
			constructor() {
				super();
				this.init()
			}

			public init() {
				setTimeout(() => {
					const startTime = Date.now();
					function scroll() {
						const currentTime = Date.now();
						const time = Math.min(100, currentTime - startTime);
						const eased = (time / 100); // 使用二次缓动
						window.scrollTo(0, Number(localStorage.getItem('CURRENT_SCROLL') || 0).valueOf() * eased)

						if(time < 100) {
							requestAnimationFrame(scroll);
						}
					}
					requestAnimationFrame(scroll);
				})

			    const uls = this.querySelectorAll('ul');
				const lis = this.querySelectorAll('li')

				lis.forEach(item => {
					item.addEventListener('click', () => {
						events.emit('clickItem')
					})
				})
				uls.forEach(ul => {
					if(ul.getAttribute('list-name').includes(this.currentTab)) {
						ul.className = 'active'
					} else {
						ul.className = ''
					}
				})
				this.changeTab()
			}

			public changeTab() {
				events.subscribe('clickItem', () => {
					localStorage.setItem('CURRENT_SCROLL', String(window.scrollY).valueOf())
				})
				events.subscribe('changeTab', (data) => {
					localStorage.setItem('CURRENT_TAB', data)
					localStorage.setItem('CURRENT_SCROLL', '0')
					const uls = this.querySelectorAll('ul');
					uls.forEach(ul => {
						if(ul.getAttribute('list-name').includes(data)) {
							ul.className = 'active'
						} else {
							ul.className = ''
						}
					})
				})
			}
		}

		class BlogTabs extends HTMLElement {
			private currentTab = localStorage.getItem('CURRENT_TAB') || 'all'
			constructor() {
				super();
				const buttons = this.querySelectorAll('a');
				buttons.forEach(button => {
					if(this.currentTab == button.textContent) {
						button.className = 'active'
					} else {
						button.className = ''
					}
					button.addEventListener('click', (e: any) => {
						events.emit('changeTab', e.target.textContent)
						buttons.forEach(button => {
							if(e.target.textContent == button.textContent) {
								button.className = 'active'
							} else {
								button.className = ''
							}
						})
					});
				})
			}
		}

		customElements.define('blog-tabs', BlogTabs)
		customElements.define('blog-views', BlogViews)
	</script>
	<style lang="scss">
		main {
			width: 960px;
		}
		ul {
			display: flex;
			flex-wrap: wrap;
			gap: 2rem;
			list-style-type: none;
			margin: 0;
			padding: 0;
		}
		ul li {
			width: calc(50% - 1rem);
		}
		ul li * {
			text-decoration: none;
			transition: 0.2s ease;
		}
		ul li img {
			margin-bottom: 0.5rem;
			border-radius: 12px;
		}
		ul li a {
			display: block;
		}
		.title {
			margin: 0;
			color: rgb(var(--black));
			line-height: 1;
		}
		.date {
			margin: 0;
			color: rgb(var(--gray));
		}
		ul li a:hover h4,
		ul li a:hover .date {
			color: rgb(var(--accent));
		}
		ul a:hover img {
			box-shadow: var(--box-shadow);
		}
		@media (max-width: 720px) {
			ul {
				gap: 0.5em;
			}
			ul li {
				width: 100%;
				text-align: center;
			}
			ul li:first-child {
				margin-bottom: 0;
			}
			ul li:first-child .title {
				font-size: 1.563em;
			}
		}

		.left-tabs {
			display: block;
			position: fixed;
			top: calc(80px + 3em);
			margin-left: -200px;
			border-right: 2px solid rgba(153, 153, 153, 0.8);
			a{
				display: flex;
				align-items: center;
				justify-content: space-between;
				cursor: pointer;
				gap: 16px;
				width: 110px;
				color: rgba(153, 153, 153, 0.8);
				&::after {
					content: '';
					display: block;
					height: 35px;
					width: 2px;
					position: relative;
					left: 2px;
				}
				transition: all .3s ease;
			}
			.active{
				color: black;
				&::after {
					border-right: 2px solid black;
				}
			}
		}
		.right-views{
			ul {
				display: none;
			}
			.active{
				display: flex;
			}
		}
	</style>
</html>
